{"version":3,"sources":["types/StatusFilter.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["StatusFilter","TodoList","props","todos","selectedTodo","setSelectedTodo","className","map","todo","isSelected","cn","id","completed","title","type","onClick","TodoFilter","searchQuery","setSearchQuery","status","setStatus","value","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","catch","error","message","finally","href","email","name","App","setTodos","statusFilter","setStatusFilter","todosToRender","useMemo","filter","hasToBeRendered","preparedQuery","trim","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cb7cbdd.chunk.js","sourcesContent":["export enum StatusFilter {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport type { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  setSelectedTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    todos,\n    selectedTodo,\n    setSelectedTodo,\n  } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const isSelected = selectedTodo === todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({ 'has-background-info-light': isSelected })}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setSelectedTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far',\n                      {\n                        'fa-eye': !isSelected,\n                        'fa-eye-slash': isSelected,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n\n      </tbody>\n    </table>\n  );\n};\n","import { StatusFilter } from '../../types/StatusFilter';\n\ntype Props = {\n  searchQuery: string;\n  setSearchQuery: (searchQuery: string) => void;\n  status: StatusFilter;\n  setStatus: (status: StatusFilter) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = (props) => {\n  const {\n    searchQuery,\n    setSearchQuery,\n    status,\n    setStatus,\n  } = props;\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={status}\n            data-cy=\"statusSelect\"\n            onChange={event => setStatus(event.target.value as StatusFilter)}\n          >\n            <option value={StatusFilter.ALL}>All</option>\n            <option value={StatusFilter.ACTIVE}>Active</option>\n            <option value={StatusFilter.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={event => setSearchQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setSearchQuery('')}\n              aria-label=\"clear\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport type { User } from '../../types/User';\nimport type { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(setUser)\n      .catch(error => error.message)\n      .finally(() => setIsLoading(false));\n  }, [todo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n              aria-label=\"close\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport type { Todo } from './types/Todo';\nimport { StatusFilter } from './types/StatusFilter';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState(StatusFilter.ALL);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(\n    () => {\n      getTodos()\n        .then(setTodos)\n        .catch(error => error.message)\n        .finally(() => setIsLoading(false));\n    },\n    [],\n  );\n\n  const todosToRender = useMemo(() => todos.filter(todo => {\n    let hasToBeRendered = true;\n\n    switch (statusFilter) {\n      case StatusFilter.ALL:\n        break;\n\n      case StatusFilter.ACTIVE:\n        hasToBeRendered = !todo.completed;\n        break;\n\n      case StatusFilter.COMPLETED:\n        hasToBeRendered = todo.completed;\n        break;\n\n      default:\n        break;\n    }\n\n    if (hasToBeRendered && searchQuery) {\n      const preparedQuery = searchQuery.trim().toLowerCase();\n      const preparedTitle = todo.title.toLowerCase();\n\n      hasToBeRendered = preparedTitle.includes(preparedQuery);\n    }\n\n    return hasToBeRendered;\n  }), [todos, searchQuery, statusFilter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n                status={statusFilter}\n                setStatus={setStatusFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={todosToRender}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n        && (\n          <TodoModal\n            todo={selectedTodo}\n            onClose={() => setSelectedTodo(null)}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}